1.defaultowe api opisane w dokumentacji RN ( https://facebook.github.io/react-native/docs/geolocation )
----------------------------------------
>>>>>>>>PLUSY<<<<<<<<
+ 
ten sam kod Android i iOS
+ 
getCurrentPosition - zwraca ostatną lokalizację; watchPosition - odpala się gdy pozycja gps się zmieni
+ 
ma flage włączającą wysoką dokładność lokalizacji 
} "enableHighAccuracy (bool) - Is a boolean representing if to use GPS or not. 
   If set to true, a GPS position will be requested. If set to false, a WIFI location will be requested"


>>>>>>>>MINUSY<<<<<<<<
- 
trzeba samemu decydować o tym kiedy requestować o pozycję z GPS a kiedy z wifi - duze uproszczenie w stosunku do natywnych rozwiązań

    a)  Jak jest na Androidzie? - pozwala uzaleznic dokładnosc lokalizacji od wykorzystania baterii
        setPriority() - This method sets the priority of the request, which gives the Google Play services location services a strong hint about which location sources to use. The following values are supported:
        PRIORITY_BALANCED_POWER_ACCURACY - Use this setting to request location precision to within a city block, which is an accuracy of approximately 100 meters. This is considered a coarse level of accuracy, and is likely to consume less power. With this setting, the location services are likely to use WiFi and cell tower positioning. Note, however, that the choice of location provider depends on many other factors, such as which sources are available.
        PRIORITY_HIGH_ACCURACY - Use this setting to request the most precise location possible. With this setting, the location services are more likely to use GPS to determine the location.
        PRIORITY_LOW_POWER - Use this setting to request city-level precision, which is an accuracy of approximately 10 kilometers. This is considered a coarse level of accuracy, and is likely to consume less power.
        PRIORITY_NO_POWER - Use this setting if you need negligible impact on power consumption, but want to receive location updates when available. With this setting, your app does not trigger any location updates, but receives locations triggered by other apps.

    b)  Jak jest na iOS?  - wybiera się dokładność... i tyle (a pod spodem do określenia lokalizacji wedle własnego uznania uzywa informacji o pobliskich sieciach Wifi, wiezach komórkowych lub danych z GPS  )
        kCLLocationAccuracyBestForNavigation
        kCLLocationAccuracyBest
        kCLLocationAccuracyNearestTenMeters
        kCLLocationAccuracyHundredMeters
        kCLLocationAccuracyKilometer
        kCLLocationAccuracyThreeKilometers
        ...i jednocześnie dokładnością mozna wpływać na zuzycie baterii

"
In iOS you need not worry about location provider. 
Based on the accuracy you are setting, iOS framework will itself take decision 
and will push the location. You can not specify location provider in iOS.
"
-
    przy zdecydowaniu się na defaultowe api trzeba liczyć się z tym, ze włączenie uzywania samego GPS zapewnia duzą dokladnosc, ale szybko zuzywa baterię
    i moze wymagać dłuzszego czasu pobierania lokalizacji
    ("....trying to get a more accurate fix may require more time. [z opisu Core location]")

- W3C Geolocation API

- Na Androidzie występują timeout'y przy pobieraniu lokazliacji [nie sprawdzałem doświadczalnie, ale pisze tak w opisie biblioteki
+ potwierdzają to komentarze na stackoverflow , 
   których nie ma gdy uzywa się natywnego FusedLocationProviderClient API.  Na iOS ich nie ma
    (przynajmniej wg https://www.npmjs.com/package/react-native-geolocation-service) 

 
2. react-native-fused-location ( https://www.npmjs.com/package/react-native-fused-location )
---------------------------------------------------------------------------------------------
+(-?) api bardzo zblizone do oryginalnego androidowego 

Plus znaleziony tylko w tej bibliotece:
+ setLocationPriority() - mozliwosc uzaleznienia dokladnosci lokalizacji od wykorzystania baterii - w innej bibliotece 

+ rozwiązany problem timeout'ów [nie potwierdzone, ale skoro uzywa androidowego fused location...]

- podejrzenie ze uzywa pod spodem przestarzałego api androidowego (po kliknieciu "Fused" w link https://www.npmjs.com/package/react-native-fused-location )
- 439 weekly downloads
- wersja 0.4.0
- nie udało mi się uruchomic tego na iOS (co nie przeszkadza o ile zgadzamy się na zrobienie dla iOS'a osobnego widoku uzywajacego defaultowe API)               
* od RN > 0.40
* od Android SDK >=16

3. react-native-geolocation-service ( https://www.npmjs.com/package/react-native-geolocation-service ) 
-----------------------------------------------------------------------------------------------------
+ 2 proste metody jak wszędzie: watchPosition wywołuje się na kazdą zmianę lokalizacji, getCurrentPosition słuzy do zwracania ostatniej znanej lokalizacji
+ wspólne api dla Androida i iOS'a
+ 6 561 weekly downloads (ostatnio nawet: 8,392)
+ próbuje rozwiazać problem timeoutów na Androidzie
+ na iOSie nie trzeba robić prawie nic po dolaczeniu bibilioteki - tylko dodać wpis do Info.pslist tak jak przy dodawaniu defaultowej geolokalizacji RN

- prosta flaga enableHighAccuracy taka jak w defaultowym API RN
i brak setLocationPriority 

4. react-native-location (https://www.npmjs.com/package/react-native-location)
-------------------------
+ wykorzystuje natywne API obydwu platform, podobno pozwala na załączenie providera GoogleFusedLocation [ale nie wiem jak to zrobić]
+ skoro wykorzystuje natywne API - rozwiązuje ewentualne problemy dokładności/timeoutów
+ pozwala na ustawianie flag dokładnosci GPS charakterystycznych dla obydwu platform
+ umozliwia pytanie o permissiony z opcjami "when in use" lub "always" na iOS i coarse lub fine na androidzie
+ ma dodatkowe metody odpytywania o pozycje charakterystyczne dla iOS'a np. subscribeToSignificantLocationUpdates

- wymaga dołączania bibliotek natywnych obydwu platform
- problemy w konfiguracji/ odpaliłem tylko najprostszy przykład pobrania lokalizacji
- problem z pobieraniem lokalizacji na biezaco
- wygląda na to ze na Androdzie wymaga dodatkowego natywnego kodu (nie związanego z biblioteką)
pozwalającego na dostarczenie FusedLocation providera

* RNLocation.configure({
    distanceFilter: 100, // Meters
    desiredAccuracy: {
      ios: "best",
      android: "balancedPowerAccuracy"
    },
    // Android only
    androidProvider: "auto",
    interval: 5000, // Milliseconds
    fastestInterval: 10000, // Milliseconds
    maxWaitTime: 5000, // Milliseconds
    // iOS Only
    activityType: "other",
    allowsBackgroundLocationUpdates: false,
    headingFilter: 1, // Degrees
    headingOrientation: "portrait",
    pausesLocationUpdatesAutomatically: false,
    showsBackgroundLocationIndicator: false,
})

4. [płatne] react-native-background-geolocation https://www.npmjs.com/package/react-native-background-geolocation
------------------------------------------------------------------------------------------------------------------

* wersja 2.0.0 od RN> 0.57, poniej wersja 1.1.0
//////////////////////////////////////////////////////////////////////////////////////////////         

Opcje
-------------
a) Defaultowe API RN 

b)[zaimpl] react-native-geolocation-service

+ wspólny kod geolokalizacji dla Androida i iOS'a 
+ pod spodem iOS uzywa defaultowego api RN a Android FusedLocationProviderClient
- brak mozliwosci okreslania dokladosci GPS (i poziomu wykorzystywania baterii)
- co z dokładnością geolokalizacji na iOS? ( https://stackoverflow.com/questions/43629524/react-native-ios-geoloc-has-poor-accuracy-by-default )

c)[zaimpl] react-native-fused-location (Android) + defaultowe api (iOS) 

+ Rozwiązany problem timeoutów na Androidzie
+ setLocationPriority(czyli mozliwosc okreslania dokladnosci GPS/poziomu zuzywania baterii [na Androidzie, na iOS trzeba by poszukać biblioteki...])

- Trzeba robić dwa osobne komponenty dla Androida i iOS'a
- co z dokładnością geolokalizacji na iOS? ( https://stackoverflow.com/questions/43629524/react-native-ios-geoloc-has-poor-accuracy-by-default )

d) [wydaje się najlepsze, jeśli b) nie jest wystarczające] react-native-geolocation-service + react_native_location 
(react_native_location prawdopodobnie naprawia problemy z dokładnością na iOS [przeczytane, niesprawdzone] + daje większe mozliwosci z iOSowymi permissionami )

e) react-native-fused-location (Android) + react_native_location (iOS)
f) [nie sprawdzone] react-native-location z właczeniem opcji GoogleFusedLocation
g)[płatne]react-native-background-geolocation
//Permissiony
/////////////
* Android - RN ma specjalne api do requestowania o permissiony
* iOS  - jeśli defaultowe api nie wystarcza jest biblioteka, uzywająca :
 https://github.com/timfpark/react-native-location
https://stackoverflow.com/questions/43629524/react-native-ios-geoloc-has-poor-accuracy-by-default 
Allows you choose what type of permission to ask for ("when in use" or "always"). The built-in geolocation library will look at your plist file and choose "always"
 Inne
 /////
 * Pamiętać o czyszczeniu watch w componentWillUnmount bo bez tego będę odbierał pozycję na wszystkich ekranach jednocześnie
 * Podsumowanie: https://stackoverflow.com/questions/43629524/react-native-ios-geoloc-has-poor-accuracy-by-default
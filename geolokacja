1.defaultowe api opisane w dokumentacji RN ( https://facebook.github.io/react-native/docs/geolocation )
----------------------------------------
>>>>>>>>PLUSY<<<<<<<<
+ 
ten sam kod Android i iOS
+ 
getCurrentPosition - zwraca ostatną lokalizację; watchPosition - odpala się gdy pozycja gps się zmieni
+ 
ma flage włączającą wysoką dokładność lokalizacji 
} "enableHighAccuracy (bool) - Is a boolean representing if to use GPS or not. 
   If set to true, a GPS position will be requested. If set to false, a WIFI location will be requested"


>>>>>>>>MINUSY<<<<<<<<
- 
trzeba samemu decydować o tym kiedy requestować o pozycję z GPS a kiedy z wifi - duze uproszczenie w stosunku do natywnych rozwiązań

    a)  Jak jest na Androidzie? - pozwala uzaleznic dokładnosc lokalizacji od wykorzystania baterii
        setPriority() - This method sets the priority of the request, which gives the Google Play services location services a strong hint about which location sources to use. The following values are supported:
        PRIORITY_BALANCED_POWER_ACCURACY - Use this setting to request location precision to within a city block, which is an accuracy of approximately 100 meters. This is considered a coarse level of accuracy, and is likely to consume less power. With this setting, the location services are likely to use WiFi and cell tower positioning. Note, however, that the choice of location provider depends on many other factors, such as which sources are available.
        PRIORITY_HIGH_ACCURACY - Use this setting to request the most precise location possible. With this setting, the location services are more likely to use GPS to determine the location.
        PRIORITY_LOW_POWER - Use this setting to request city-level precision, which is an accuracy of approximately 10 kilometers. This is considered a coarse level of accuracy, and is likely to consume less power.
        PRIORITY_NO_POWER - Use this setting if you need negligible impact on power consumption, but want to receive location updates when available. With this setting, your app does not trigger any location updates, but receives locations triggered by other apps.

    b)  Jak jest na iOS?  - wybiera się dokładność... i tyle (a pod spodem do określenia lokalizacji wedle własnego uznania uzywa informacji o pobliskich sieciach Wifi, wiezach komórkowych lub danych z GPS  )
        kCLLocationAccuracyBestForNavigation
        kCLLocationAccuracyBest
        kCLLocationAccuracyNearestTenMeters
        kCLLocationAccuracyHundredMeters
        kCLLocationAccuracyKilometer
        kCLLocationAccuracyThreeKilometers
        ...i jednocześnie dokładnością mozna wpływać na zuzycie baterii

"
In iOS you need not worry about location provider. 
Based on the accuracy you are setting, iOS framework will itself take decision 
and will push the location. You can not specify location provider in iOS.
"
-
    przy zdecydowaniu się na defaultowe api trzeba liczyć się z tym, ze włączenie uzywania samego GPS zapewnia duzą dokladnosc, ale szybko zuzywa baterię
    i moze wymagać dłuzszego czasu pobierania lokalizacji
    ("....trying to get a more accurate fix may require more time. [z opisu Core location]")

Największy minus:
!!! - Na Androidzie występują timeout'y przy pobieraniu lokazliacji [nie sprawdzałem doświadczalnie, ale pisze tak w opisie biblioteki] , 
   których nie ma gdy uzywa się natywnego FusedLocationProviderClient API.  Na iOS ich nie ma
    (przynajmniej wg https://www.npmjs.com/package/react-native-geolocation-service) 

 
2. react-native-fused-location ( https://www.npmjs.com/package/react-native-fused-location )
---------------------------------------------------------------------------------------------
+ api bardzo zblizone do orginalnego androidowego 
+ setLocationPriority() - mozliwosc uzaleznienia dokladnosci lokalizacji od wykorzystania baterii
+ rozwiązany problem timeout'ów [nie potwierdzone, ale skoro uzywa androidowego fused location...]

- podejrzenie ze uzywa pod spodem przestarzałego api androidowego (po kliknieciu "Fused" w link https://www.npmjs.com/package/react-native-fused-location )
- 439 weekly downloads
- wersja 0.4.0
- nie udało mi się uruchomic tego na iOS (co nie przeszkadza o ile zgadzamy się na zrobienie dla iOS'a osobnego widoku uzywajacego defaultowe API)
               
* od RN > 0.40
* od Android SDK >=16

3. react-native-geolocation-service ( https://www.npmjs.com/package/react-native-geolocation-service ) 
-----------------------------------------------------------------------------------------------------
+ flaga high accuracy
+ wspólne api dla Androida i iOS'a
+ 6 561 weekly downloads

* getCurrentPosition słuzy do zwracania ostatniej znanej lokalizacji
* watchPosition wywołuje się na kazdą zmianę lokalizacji
* wersja 2.0.0 od RN> 0.57, poniej wersja 1.1.0

//////////////////////////////////////////////////////////////////////////////////////////////         

Opcje uzycia:
-------------
a) react-native-fused-location (Android) + defaultowe api (iOS)

+ Api podobne do orginalengo androidowego
+ setLocationPriority i lastKnownLocation 

- Trzeba robić dwa osobne komponenty dla Androida i iOS'a

b) użyć tylko react-native-geolocation-service

+ wspólny kod geolokalizacji dla Androida i iOS'a 
+ pod spodem iOS uzywa defaultowego api RN a Android FusedLocationProviderClient

 //TODO:
 [V] Przenieść requestowanie o gps do osobnych ekranów
 [V] Sprawdzić requestowanie o permissiony
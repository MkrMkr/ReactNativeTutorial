- Expo działa od Androida 4.4 w górę

-"Create React Native App" (połączone teraz z Expo?) pozwala na budowanie aplikacji w React Native na Androida i iOS'a bez zainstalowanego
Xcode'a i Android Studio, ale jeśli chcemy mieć natywny kod w aplikacji - nie będzie się dało go dołączyć

- dla danej platformy mogę zrobić component dodająć w nazwie np. android. Przykład:
TextArea.component.android.js. Taki plik przydaje się:
a) do dostosowania widoku na danej platformie
b) podczas korzystania z kodu natywnego danej platformy

- Mogę robić rozróżnienia w kodzie, np.: 
 const alignTextTop = Platform.OS ==='android' ? {textAlignVertical: 'top'}: {};
 ale preferowany sposób dostosowywania widoków dla platformy to tworzenie osobnych plików .android.js i .ios.js

- żeby zainstalować linta musiałem to zrobić tak jak w prawidłowej odpowiedzi tutaj: https://stackoverflow.com/questions/37705440/eslint-is-not-recognized-as-an-internal-or-external-command
a potem wywołać jeszcze eslint --init
i jeszcze zainstalować:
yarn add -D babel-eslint
i dodać "parser": "babel-eslint" do .exlintrc.json (bo inaczej rzucał się błąd Unexpected token itp.)
> npm run lint - pokazuje listę błędów do naprawienia 
> npm run lint:fix -odpala linta i próbuje naprawić te błędy które mogą zostac naprawione automatycznie

before es7 and after:
-------------------------
 Before:
class SomeComponent extends Component {
  constructor() {
    super();
    this.state = {
      count: 0
    }
  }
  ...
}
After:
class SomeComponent extends Component {
  state = {
    count: 0
  }
  ...
}

before es7 and after:
------------------------------
Before:

class SomeComponent extends Component {
  _incrementCounter() {
    this.setState({count: this.state.count+1})
  }
  constructor() {
    this._incrementCounter = this._incrementCounter.bind(this);
  }
  ...
}
After:

class SomeComponent extends Component {
  _incrementCounter = () => {
    this.setState({count: this.state.count+1})
  }
  ...
}

before es7 and after:
------------------------------
Before

class SomeComponent extends Component {
  static defaultProps = {
    someProp: {}
  }
  render() {
    const someProp = this.props.someProp;
  }
}
After

class SomeComponent extends Component {
  render() {
    const {someProp={}} = this.props;
  }
}

